import time
import json
from utils import generate_message_id
from outbox import gossip_message
from block_handler import received_blocks
from peer_discovery import known_peers, peer_flags

def create_inv(sender_id, block_ids):
    # TODO: * Define the JSON format of an `INV` message, which should include `{message type, sender's ID, sending blocks' IDs, message ID}`.
    # Note that `INV` messages are sent before sending blocks. 
    # `sending blocks' IDs` is the ID of blocks that the sender want to send. 
    # `message ID` can be a random number generated by `generate_message_id` in `util.py`.
    inv_msg={
        "type": "INV",
        "sender_id": sender_id,
        "block_ids": block_ids,
        "message_id": generate_message_id(sender_id)
    }
    return inv_msg

def get_inventory():
    # TODO: Return the block ID of all blocks in the local blockchain.
    block_ids = [block["block_id"] for block in received_blocks]
    return block_ids

def broadcast_inventory(self_id):
    # TODO: Create an `INV` message with all block IDs in the local blockchain.
    # 检查是否是轻量级节点，轻量级节点不应生成区块
    from peer_discovery import peer_flags
    
    if self_id in peer_flags and peer_flags[self_id].get("light", False):
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"[{self_id}] 轻量级节点不广播区块清单")
        return
        
    block_ids = get_inventory()
    
    if not block_ids:
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"[{self_id}] broadcast_inventory: 本地区块链为空，暂不广播")
        return
    
    inv_msg = create_inv(self_id, block_ids)
    
    # 添加日志输出
    import logging
    logger = logging.getLogger(__name__)
    logger.info(f"[{self_id}] broadcast_inventory: 广播区块链清单，包含 {len(block_ids)} 个区块")
    
    # TODO: Broadcast the `INV` message to known peers using the function `gossip_message` in `outbox.py`.
    from outbox import gossip_message
    
    # 使用更高的fanout值确保消息能传播到更多节点
    gossip_result = gossip_message(self_id, inv_msg, fanout=5)
    
    # 检查广播结果
    if gossip_result:
        logger.info(f"[{self_id}] broadcast_inventory: 成功广播区块清单")
    else:
        logger.warning(f"[{self_id}] broadcast_inventory: 区块清单广播失败")


